作成

virtualenvでする
```
virtualenvはPythonの仮想環境を作成するためのツールです。仮想環境を使うことで、プロジェクトごとに異なるPythonのバージョンやパッケージを管理することができます。以下は、virtualenvの使い方についての基本的な手順です。

1. virtualenvのインストール
まず、virtualenvをインストールします。Pythonのパッケージ管理ツールであるpipを使ってインストールします。

pip install virtualenv

2. 仮想環境の作成
次に、仮想環境を作成します。仮想環境のディレクトリを指定することで、指定した場所に仮想環境が作成されます。

virtualenv myenv
ここで、myenvは仮想環境の名前で、任意の名前をつけることができます。

3. 仮想環境のアクティベート
仮想環境をアクティベートすると、その環境内でのPythonコマンドやパッケージの操作が可能になります。

Windowsの場合:

myenv\Scripts\activate
macOSやLinuxの場合:

source myenv/bin/activate
仮想環境がアクティベートされると、プロンプトが変わり、環境の名前が表示されます。

4. パッケージのインストール
仮想環境がアクティベートされている状態で、pipを使ってパッケージをインストールします。これにより、仮想環境内にのみパッケージがインストールされます。

pip install package_name





5. 仮想環境のディアクティベート
作業が終わったら、仮想環境をディアクティベートして通常の環境に戻ります。

deactivate

6. 仮想環境の削除
仮想環境を削除するには、仮想環境のディレクトリを削除します。

rm -rf myenv
これで仮想環境は削除され、環境にインストールされていたパッケージも削除されます。

補足
virtualenvの代わりに、Pythonの標準ライブラリに含まれるvenvモジュールを使用することもできます。venvはPython 3.3以降で標準装備されています。

python -m venv myenv
仮想環境の管理を簡単にするために、pipenvやpoetryなどのツールも検討する価値があります。これらは依存関係の管理もサポートしています。
```


python3が必要　

$ pip3 install flask lxml

$ mkdir xpath 
$ cd xpath
[~/xpath]
templates
app.py
$ mkdir templates
$ ls
$ cd templates
[~/xpath/templates]
$ ls
index.html

スタート
[~/xpath]
$ python3 app.py



